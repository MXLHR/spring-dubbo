<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop 
	    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
	    http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
	default-lazy-init="true">
	
	<context:component-scan base-package="com.zhph.*"></context:component-scan>
	
	<!-- 声明式增强AOP -->
<!-- 	<bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interfaces" value="com.zhph.spring.springboot.lesson1.aop_c1.Greeting"></property>
		<property name="target" ref="greetingImpl"></property>
		<property name="interceptorNames" value="greetingAroundAdvice">  
        <property  name="interceptorNames">
            <list>  
                <value>greetingAroundAdvice</value>  
            </list>  
        </property>
	</bean> -->
	<!-- 声明式增强AOP -->
	   <!-- proxyTargetClass属性表示是否代理目标类，默认是false，也就是代理接口，
        	上面一个例子的配置就是没有这一项属性所以用JDK动态代理，现在是true即使用CGLib动态代理。
        	所以在测试方法中是GreetingImpl greetingImpl = （GreetingImpl）context.getBean（"beans.xml"）,
        	而不会是Greeting greeting = （Greeting）context.getBean（"beans.xml"）,因为现在是代理目标类而不是代理接口。 -->
<!-- 	<bean id="greetingProxy2" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interfaces" value="com.zhph.spring.springboot.lesson1.aop_c1.Love"></property>引入接口
		<property name="target" ref="greetingImpl" />目标类
		<property name="interceptorNames" value="loveAdvice" />
		<property name="proxyTargetClass" value="true"></property>代理目标类
	</bean> -->
	
	<!-- spring aop代理的演进 -->
	<bean id="greetAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice" ref="greetingAroundAdvice"></property>
		<property name="pattern" value="com.zhph.spring.springboot.lesson1.aop_c1.GreetingImpl.good.*"></property>
	</bean>
	<!-- InterceptorNames属性不再是原来的增强，而是一个定义好的切面greetingAdvisor，切面里面还用正则表达式定义了一个切点，即拦截GreetingImpl类中以good开头的方法。 -->
	 <bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interfaces" value="com.zhph.spring.springboot.lesson1.aop_c1.Love"></property>
		<property name="target" ref="greetingImpl" />
		<property name="interceptorNames" value="greetAdvisor" /><!-- 切面 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean> 
	

<!-- 	<aop:aspectj-autoproxy/> -->

</beans>  